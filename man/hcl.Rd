% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parse_hcl.R
\name{hcl}
\alias{hcl}
\alias{lch}
\title{HCL color specification}
\usage{
hcl(h = 0, c = 0.65, l = 0.65, alpha = NULL, compat = FALSE, ...)

lch(l = 0.65, c = 0.65, h = 0)
}
\arguments{
\item{h}{hue, either an angle around the color wheel, in [0,360] (angles outside of the range are rotated back to within [0, 360]: 380 = 20, -15 = 345, etc.), or a color (hex or named) from which the hue is extracted (by function \code{\link{hue}}).}

\item{c}{chromacity, number in \code{[0,~1]}; 0 is grey, ~1 is full color.}

\item{l}{lightness, number in \code{[0,1]}; 0 is darkest, 1 is brightest.}

\item{alpha}{transparency, number in \code{[0,1]}; 0 means fully transparent, 1 means fully opaque. See function \code{\link{alpha}} for another way to change the transparency after the fact.}

\item{compat}{whether to make the conventions compatible with the built-in function \code{grDevices::\link[grDevices]{hcl}}: \code{c} and \code{l} should be in [0,100], not [0,1]. However, the mechanism for converting from HCL space to sRGB are different in the two functions, and they therefore produce different colors.}

\item{...}{ignored, for compatibility with the built-in \code{\link[grDevices]{hcl}} function.}
}
\value{
A vector of colors specified as hex codes
}
\description{
Create a vector of colors from hue, chromacity, and lightness.
}
\details{
The first argument can also be a data.frame or a matrix. In that case, its columns are considered as the color components, taken in order, and the other color components arguments are ignored.

When separate arguments are used for the color components and are vectors, values in shorter arguments are recycled to match the length of the longest argument. If the lengths are not compatible, an error is output.

In HCL space, the perceived color (hue) is completely separated from the perceived intensity (chromacity) and lightness of the color. This means that colors of various hues but same chromacity and lightness appear as the exact same grey when converted to greyscale. This makes the HCL space particularly suitable to create good color palettes:
\itemize{
  \item For qualitative palettes (discrete variables): varying \code{h} at constant \code{c} and \code{l} avoids drawing attention to certain hues, as would happen if the same was done in HSV or HSL space. Indeed, some hues are perceived as brighter (yellow, light green, etc.), others as duller/darker (blues, etc.).
  \item For sequential palettes (continuous variables): varying \code{l} (or possibly \code{c}) for a constant \code{h} gives a sense of direction and avoid the many perceptual pitfalls typical of 'rainbow'-like scales.
}
}
\examples{
hcl()
hcl(330, 1, 0.6)
hcl(data.frame(c(330, 340), c(1,1), c(0.6, 0.4)))
hcl(matrix(c(330, 340, 1, 1, 0.6, 0.4), ncol=3))
hcl(c(330, 340), 1, 0.6)

# Compare "rainbow"-like scales in various color spaces
ramp <- seq(0, 1, length.out=10)
show_col(
  hcl(h=ramp*360),
  hsv(h=ramp*360, s=0.9),
  hsl(h=ramp*360, s=0.9)
)
# Hue, chromacity, and lightness scales
show_col(
  hcl(h=ramp*360),
  hcl(c=ramp),
  hcl(l=ramp)
)

# Nice color palettes
show_col(
  hcl(h=80+ramp*240, c=0.2+ramp*0.4, l=0.9-ramp*0.6),
  hcl(h=240-ramp*120, c=0.5, l=ramp*0.9),
  hcl(h=0+ramp*80, c=0.6-ramp*0.4, l=0.1+ramp*0.8),
  hcl(h=210+ramp*150, c=0.3, l=0.1+ramp*0.5)
)
}
\seealso{
HCL-based color scales: \code{\link{hue_scale}}, \code{\link{chroma_scale}}, and \code{\link{light_scale}}.

\code{\link{parse_color}} for the general function to parse colors in various specifications (which this function calls internally) and \code{\link{convert_color}} to convert parsed colors to another model.

Other color specifications: 
\code{\link{cmyk}()},
\code{\link{css}()},
\code{\link{hex}()},
\code{\link{hsi}()},
\code{\link{hsl}()},
\code{\link{hsv}()},
\code{\link{lab}()},
\code{\link{parse_color}()},
\code{\link{rgb}()},
\code{\link{ryb}()},
\code{\link{temperature}()},
\code{\link{wavelength}()}
}
\concept{color specifications}
