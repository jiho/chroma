% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scale_plasma.R
\name{plasma_scale}
\alias{plasma_scale}
\alias{plasma_map}
\alias{plasma_palette}
\alias{plasma_colors}
\alias{scale_color_plasma_c}
\alias{scale_colour_plasma_c}
\alias{scale_fill_plasma_c}
\alias{scale_color_plasma_d}
\alias{scale_colour_plasma_d}
\alias{scale_fill_plasma_d}
\alias{scale_fill_plasma}
\alias{scale_color_plasma}
\alias{scale_colour_plasma}
\title{Magma color scale and palette}
\usage{
plasma_scale(
  domain = c(0, 1),
  reverse = FALSE,
  na.value = NULL,
  extrapolate = FALSE
)

plasma_map(x, ...)

plasma_palette(...)

plasma_colors(n, ...)

scale_color_plasma_c(..., reverse = FALSE, na.value = NULL, guide = "colorbar")

scale_fill_plasma_c(..., reverse = FALSE, na.value = NULL, guide = "colorbar")

scale_color_plasma_d(..., reverse = FALSE, na.value = NULL, guide = "legend")

scale_fill_plasma_d(..., reverse = FALSE, na.value = NULL, guide = "legend")
}
\arguments{
\item{domain}{vector of two values between which the scale is computed.}

\item{reverse}{whether to reverse the order of colors along the scale.}

\item{na.value}{value to return for missing values in the input. Can be either a color, \code{NULL} in which case a tentitatively appropriate color will be chosen automatically, or \code{NA}.}

\item{extrapolate}{when \code{FALSE}, the default, return \code{NA} for input values that are out of the domain; when \code{TRUE} return the color corresponding to the extreme of the domain instead.}

\item{x}{a vector whose values will be coerced to numbers and mapped to colors.}

\item{...}{passed to \code{\link{plasma_scale}} from other \code{plasma_*} functions; passed to \code{ggplot2::\link[ggplot2]{continuous_scale}} or \code{ggplot2::\link[ggplot2]{discrete_scale}} from the \code{scale_*} functions, as appropriate. NB: in all situations, passing \code{domain} is meaningless and yields an error.}

\item{n}{number of colors to extract from the color palette.}

\item{guide}{type of guide for the legend ("colorbar" for a continuous colorbar, "legend" for a categorical guide) or guide object itself.}
}
\value{
\code{*_scale} returns a \strong{function}. This function takes a single argument (\code{x}: a numeric vector), maps its values to colors, and returns thee colors as hex codes.

\code{*_map} is a shortcut for \code{*_scale(domain=range(x))(x)}: it creates a scale that spans the range of values in argument \code{x}, maps the content of \code{x} on that scale, and returns the \strong{colors}.

\code{*_palette} returns a \strong{function}. This function takes an integer (\code{n}) as argument, picks \code{n} colors evenly spaced along the scale, and returns them as hex codes.

\code{*_colors} is a shortcut for \code{*_palette()(n)} and directly returns \code{n} evenly spaced \strong{colors}. It is equivalent to built-in functions such as \code{\link[grDevices]{heat.colors}}, \code{\link[grDevices]{topo.colors}}, etc.

\code{scale_*} return a \strong{ggplot2 scale}, either discrete (similar to \code{\link[ggplot2]{scale_color_discrete}}) or continuous (similar to \code{\link[ggplot2]{scale_color_continuous}}).
}
\description{
The \code{plasma} color palette, by Nathaniel J. Smith and Stefan van der Walt (CC0 license).
}
\examples{
# Get a few colors along the palette
show_col(
  plasma_palette()(20),
  plasma_colors(50),
  plasma_colors(20, reverse=TRUE)
)

# 1/ Represent a continuous variable

# Map the elevation of the Maunga Whau volcano
image(maunga, col=plasma_colors(100), asp=1)
contour(maunga, col=alpha("white", 0.5), add=TRUE)

persp(maunga, theta=50, phi=25, scale=FALSE, expand=2,
      border=alpha("black", 0.4),
      col=plasma_map(persp_facets(maunga$z)))

\dontrun{
# with ggplot2
library("ggplot2")
ggplot(maungaxyz) + coord_fixed() +
  geom_raster(aes(x=x, y=y, fill=z)) +
  geom_contour(aes(x=x, y=y, z=z), color="white", alpha=0.5) +
  scale_fill_plasma()

# in spinning 3D
library("rgl")
persp3d(maunga, aspect=c(1,0.7,0.2), axes=FALSE, box=FALSE,
        col=plasma_map(maunga$z))
play3d(spin3d(axis=c(0, 0, 1), rpm=10), duration=6)}

# Represent a third variable on a scatterplot
attach(airquality)
# define a scale encompassing the whole data
my_scale <- plasma_scale(domain=c(0,200))
# use the same scale for the plot and the legend
pars <- sidemargin()
plot(Wind, Temp, col=my_scale(Ozone), pch=19)
sidelegend(legend=c(pretty(Ozone), "NA"),
           col=my_scale(c(pretty(Ozone), NA)), pch=19)
par(pars)

\dontrun{
# or with ggplot2
# but the light yellows at the top of the scale are difficult to see
# on points; either outline them or put them on a dark background
ggplot(airquality) +
  geom_point(aes(x=Wind, y=Temp, fill=Ozone), shape=21, size=2) +
  scale_fill_plasma()
ggplot(airquality) + theme_dark() +
  geom_point(aes(x=Wind, y=Temp, color=Ozone)) +
  scale_color_plasma(na.value="grey60")}


# 2/ Represent a discrete variable
# albeit only with a limited number of levels

attach(iris)
pars <- sidemargin()
plot(Petal.Length, Petal.Width, pch=21, bg=plasma_map(Species))
sidelegend(legend=levels(Species),
           pt.bg=plasma_colors(n=nlevels(Species)), pch=21)
par(pars)

\dontrun{
# or with ggplot2
ggplot(iris) +
  geom_point(aes(Petal.Length, Petal.Width, fill=Species), shape=21) +
  scale_fill_plasma_d()}
}
\seealso{
\code{\link{plasma}} for the colors in the palette.

Other color scales and palettes: 
\code{\link{brewer_scale}()},
\code{\link{chroma_scale}()},
\code{\link{cubehelix_scale}()},
\code{\link{etopo_scale}()},
\code{\link{hue_scale}()},
\code{\link{inferno_scale}()},
\code{\link{interp_scale}()},
\code{\link{light_scale}()},
\code{\link{magma_scale}()},
\code{\link{turbo_scale}()},
\code{\link{viridis_scale}()},
\code{\link{vsup_scale}()},
\code{\link{wikitopo_scale}()}
}
\concept{color scales and palettes}
