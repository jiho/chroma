% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/manip_saturate.R
\name{saturate}
\alias{saturate}
\alias{desaturate}
\title{Change color saturation}
\usage{
saturate(x, amount = 1)

desaturate(x, amount = 1)
}
\arguments{
\item{x}{vector of colors specified as hex strings or named R colors.}

\item{amount}{numeric amount of change in saturation. Reasonable amounts are 1 to 10. Negative amounts correspond to the opposite operation (\code{saturate("red", -1) = desaturate("red", 1)}.)}
}
\value{
A vector of colors specified as hex codes
}
\description{
Saturate or desaturate colors
}
\details{
Colors are converted into HCL space where the C (chroma) component is changed. Most colors are (very slightly) affected by the conversion and the change in saturation is therefore not exactly reversible (saturating a desaturated color will not get you back to the original one); although, perceptually, the changes should be extremely subtle and only affect very bright and saturated colors.
}
\examples{
saturate("#7BBBFE")
saturate(c("coral1", "#850E5D"))
desaturate("darkgreen")

show_col(c("hotpink", saturate("hotpink"), desaturate("hotpink")),
         c("lightskyblue", saturate("lightskyblue"), desaturate("lightskyblue")))
show_col(c(desaturate("salmon3", 2),
           desaturate("salmon3"),
           "salmon3",
           saturate("salmon3"),
           saturate("salmon3", 2)))

# saturate() and desaturate() are opposite operations, the direction of
# which is set by the sign of `amount`
saturate("red", -1)
desaturate("red", 1)

# But they are not necessarily exactly reversible when they operate near
# extreme saturation values
col <- "#5EFF15"
(new_col <- desaturate(saturate(col)))
show_col(c(col, new_col))
# = the two greens are slightly different
}
\seealso{
Other color manipulation functions: 
\code{\link{average}()},
\code{\link{blend}()},
\code{\link{channel}()},
\code{\link{darken}()},
\code{\link{luminance}()},
\code{\link{mix}()}
}
\concept{color manipulation functions}
